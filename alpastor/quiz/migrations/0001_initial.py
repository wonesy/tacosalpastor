# Generated by Django 2.0.5 on 2018-06-07 08:37

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('epita', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MultipleChoiceOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(help_text='Enter the text you want displayed as an MC option', max_length=1024)),
                ('is_correct', models.BooleanField(default=False, help_text='Is this the correct answer to the question?')),
            ],
            options={
                'verbose_name': 'Option',
                'verbose_name_plural': 'Options',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(help_text='the actual question being asked', max_length=1023, verbose_name='Question Content')),
                ('figure', models.ImageField(blank=True, null=True, upload_to='image/quiz', verbose_name='Figure')),
                ('explanation', models.CharField(blank=True, help_text='Explanation of correct answer to be shown after user submits response', max_length=1023, verbose_name='Explanation')),
                ('type', models.IntegerField(choices=[(0, 'Essay Question'), (1, 'Multiple Choice Question'), (2, 'Checkbox Question'), (3, 'Numeric Scale Question')], default=0, verbose_name='Question Type')),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=80, verbose_name='Title')),
                ('description', models.TextField(blank=True, help_text='description of the quiz', verbose_name='Description')),
                ('url', models.SlugField(help_text='a user friendly url', max_length=80, verbose_name='User-friendly URL')),
                ('status', models.CharField(choices=[('DRAFT', 'draft'), ('READY', 'ready'), ('COMPLETED', 'completed')], default='DRAFT', help_text='the quiz can either be ready to take, completed, or a draft', max_length=9, verbose_name='Status')),
                ('open', models.BooleanField(default=False, help_text='when the quiz is opened, users can begin, otherwise, no answers are accepted', verbose_name='Open')),
                ('time_limit', models.TimeField(blank=True, help_text='time limit for which quiz will be open', null=True, verbose_name='Time limit')),
                ('randomize', models.BooleanField(default=False, help_text='randomize question order', verbose_name='Randomize')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Creation Time')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='epita.Course', verbose_name='Associated Course')),
            ],
            options={
                'verbose_name': 'Quiz',
                'verbose_name_plural': 'Quizzes',
            },
        ),
        migrations.CreateModel(
            name='MultipleChoiceQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='quiz.Question')),
                ('randomize', models.BooleanField(default=False, help_text='randomize the option order', verbose_name='Randomize Options')),
            ],
            bases=('quiz.question',),
        ),
        migrations.CreateModel(
            name='NumericScaleQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='quiz.Question')),
                ('min', models.IntegerField(verbose_name='Minimum Scale Value')),
                ('max', models.IntegerField(verbose_name='Maximum Scale Value')),
                ('step', models.IntegerField(default=1, verbose_name='Step Value')),
                ('correct_value', models.IntegerField(blank=True, null=True, verbose_name='Correct Value')),
            ],
            bases=('quiz.question',),
        ),
        migrations.AddField(
            model_name='question',
            name='quiz',
            field=models.ManyToManyField(blank=True, to='quiz.Quiz', verbose_name='Quiz'),
        ),
        migrations.AddField(
            model_name='multiplechoiceoption',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.Question', verbose_name='Multiple Choice Question'),
        ),
        migrations.CreateModel(
            name='CheckboxQuestion',
            fields=[
                ('multiplechoicequestion_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='quiz.MultipleChoiceQuestion')),
                ('multiple_answers', models.BooleanField(default=True, verbose_name='Multiple Correct Answers')),
                ('partial_credit', models.BooleanField(default=False, help_text='Allow partial credit for correctly chosen answers, but where not all correct answers were chosen', verbose_name='Partial Credit')),
                ('total_correct_answers', models.IntegerField(help_text='total number of correct answers', verbose_name='Total Correct Answers')),
                ('incorrect_choice_points_lost', models.DecimalField(decimal_places=2, default=1, help_text='the number of points lost for an incorrect choice', max_digits=4, verbose_name='Incorrect Choice Points Lost')),
                ('missed_choice_points_lost', models.DecimalField(decimal_places=2, default=0, help_text="the number of points lost for a correct choice that's missed", max_digits=4, verbose_name='Missed Choice Points Lost')),
                ('allow_negative_score', models.BooleanField(default=False, help_text='allow negative scores', verbose_name='Allow Negative Scores')),
            ],
            bases=('quiz.multiplechoicequestion',),
        ),
    ]
